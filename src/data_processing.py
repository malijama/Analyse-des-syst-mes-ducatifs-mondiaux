"""
Module de traitement des donn√©es pour l'analyse des syst√®mes √©ducatifs.

Ce module contient les fonctions n√©cessaires pour charger, nettoyer et 
pr√©parer les donn√©es √©ducatives pour l'analyse.
"""

import pandas as pd
import numpy as np
import os
from typing import Dict, List, Tuple, Optional


class EducationDataProcessor:
    """Classe pour le traitement des donn√©es √©ducatives."""
    
    def __init__(self, data_path: str = "data/raw"):
        """
        Initialise le processeur de donn√©es.
        
        Args:
            data_path (str): Chemin vers les donn√©es brutes
        """
        self.data_path = data_path
        self.datasets = {}
        
    def load_datasets(self) -> Dict[str, pd.DataFrame]:
        """
        Charge tous les datasets √©ducatifs.
        
        Returns:
            Dict[str, pd.DataFrame]: Dictionnaire contenant tous les datasets
        """
        files = {
            'country_series': 'EdStatsCountry-Series.csv',
            'country': 'EdStatsCountry.csv',
            'indicator': 'EdStatsData.csv',
            'description': 'EdStatsFootNote.csv',
            'topic': 'EdStatsSeries.csv'
        }
        
        for name, filename in files.items():
            filepath = os.path.join(self.data_path, filename)
            if os.path.exists(filepath):
                self.datasets[name] = pd.read_csv(filepath)
                print(f"‚úÖ {filename} charg√© avec succ√®s ({self.datasets[name].shape})")
            else:
                print(f"‚ùå Fichier non trouv√©: {filepath}")
                
        return self.datasets
    
    def clean_data(self, df: pd.DataFrame, dataset_name: str) -> pd.DataFrame:
        """
        Nettoie un dataset sp√©cifique.
        
        Args:
            df (pd.DataFrame): Dataset √† nettoyer
            dataset_name (str): Nom du dataset
            
        Returns:
            pd.DataFrame: Dataset nettoy√©
        """
        df_clean = df.copy()
        
        # Supprimer les colonnes vides
        df_clean = df_clean.dropna(axis=1, how='all')
        
        # Supprimer les colonnes 'Unnamed'
        unnamed_cols = [col for col in df_clean.columns if 'Unnamed' in str(col)]
        df_clean = df_clean.drop(columns=unnamed_cols)
        
        print(f"üßπ {dataset_name} nettoy√©: {df.shape} ‚Üí {df_clean.shape}")
        
        return df_clean
    
    def get_missing_data_summary(self, df: pd.DataFrame) -> pd.DataFrame:
        """
        G√©n√®re un r√©sum√© des donn√©es manquantes.
        
        Args:
            df (pd.DataFrame): Dataset √† analyser
            
        Returns:
            pd.DataFrame: R√©sum√© des donn√©es manquantes
        """
        missing_data = pd.DataFrame({
            'Column': df.columns,
            'Missing_Count': df.isnull().sum(),
            'Missing_Percentage': (df.isnull().sum() / len(df)) * 100
        })
        
        return missing_data.sort_values('Missing_Percentage', ascending=False)
    
    def filter_by_years(self, df: pd.DataFrame, start_year: int, end_year: int) -> pd.DataFrame:
        """
        Filtre les donn√©es par p√©riode.
        
        Args:
            df (pd.DataFrame): Dataset √† filtrer
            start_year (int): Ann√©e de d√©but
            end_year (int): Ann√©e de fin
            
        Returns:
            pd.DataFrame: Dataset filtr√©
        """
        year_columns = [col for col in df.columns if str(col).isdigit() and 
                       start_year <= int(col) <= end_year]
        
        base_columns = [col for col in df.columns if not str(col).isdigit()]
        
        return df[base_columns + year_columns]
    
    def get_top_countries_by_indicator(self, df: pd.DataFrame, indicator_code: str, 
                                     year: int, top_n: int = 10) -> pd.DataFrame:
        """
        Obtient le top N des pays pour un indicateur donn√©.
        
        Args:
            df (pd.DataFrame): Dataset des indicateurs
            indicator_code (str): Code de l'indicateur
            year (int): Ann√©e de r√©f√©rence
            top_n (int): Nombre de pays √† retourner
            
        Returns:
            pd.DataFrame: Top N des pays
        """
        filtered_df = df[df['Indicator Code'] == indicator_code]
        
        if str(year) in filtered_df.columns:
            result = filtered_df[['Country Name', str(year)]].copy()
            result = result.dropna()
            result = result.sort_values(str(year), ascending=False).head(top_n)
            return result
        else:
            print(f"‚ùå Ann√©e {year} non disponible dans les donn√©es")
            return pd.DataFrame()


def load_and_process_data(data_path: str = "data/raw") -> Dict[str, pd.DataFrame]:
    """
    Fonction utilitaire pour charger et traiter rapidement les donn√©es.
    
    Args:
        data_path (str): Chemin vers les donn√©es brutes
        
    Returns:
        Dict[str, pd.DataFrame]: Datasets trait√©s
    """
    processor = EducationDataProcessor(data_path)
    datasets = processor.load_datasets()
    
    # Nettoyer chaque dataset
    cleaned_datasets = {}
    for name, df in datasets.items():
        cleaned_datasets[name] = processor.clean_data(df, name)
    
    return cleaned_datasets


if __name__ == "__main__":
    # Test du module
    processor = EducationDataProcessor()
    datasets = processor.load_datasets()
    
    if datasets:
        print("\nüìä R√©sum√© des datasets:")
        for name, df in datasets.items():
            print(f"  {name}: {df.shape}")